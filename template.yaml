AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Echelon-Backend

  SAM Template for Echelon-Backend
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Resources:
  GameLiftServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "gamelift.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
  APITestingRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Policies:
      - 
        PolicyName: "APIGameLiftTesting"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          -
            Sid: GameLiftFullAccess
            Effect: Allow
            Action: "gamelift:*"
            Resource: "*"
  APIMatchmakingRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Policies:
      - 
        PolicyName: "APIGameLiftMatchmaking"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          -
            Sid: GameLiftFullAccess
            Effect: Allow
            Action:
            - gamelift:StartMatchmaking
            - gamelift:StopMatchmaking
            - gamelift:DescribeMatchMaking
            - gamelift:AcceptMatch
            Resource: "*"
  EchelonBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: EchelonCognitoAuthorizer
        Authorizers:
          EchelonCognitoAuthorizer:
            UserPoolArn: "arn:aws:cognito-idp:us-east-1:208447551786:userpool/us-east-1_IwgYhHBvJ"
  # While we define the API Itself, the Resources Are Still Implicit
  # ServerlessRestApi is no longer an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AuthenticationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: API/authentication/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
      Timeout: 30
      Events:
        Authentication:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/login
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: NONE
        CreateUser:
          Type: Api
          Properties:
            Path: /auth/user
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
  MatchmakingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: API/matchmaking/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
      Role: !GetAtt APITestingRole.Arn
      Events:
        StartMatchmaking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /matchmaking/ticket/
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        DescribeMatchmaking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /matchmaking/status/
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        AcceptMatch:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /matchmaking/match/
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        StopMatchmaking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /matchmaking/ticket/
            Method: delete
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
  ProfileFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: API/profile/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
      Events:
        GetProfile:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /profile/
            Method: get
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        GetCustomization:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /profile/customization/
            Method: get
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        SetCustomization:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /profile/customization/
            Method: put
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        GetAchievements:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /profile/achievement/
            Method: get
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        SetAchievement:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /profile/achievement/
            Method: put
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
  TestingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: API/testing/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
      Role: !GetAtt APITestingRole.Arn
      Events:
        TestGameSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /test/game/session
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        TestPlayerSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /test/player/session
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        TestQueueSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /test/gamequeue/session
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
        TestQueueSessionStatus:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /test/gamequeue/session/status
            Method: post
            RestApiId: !Ref EchelonBackendApi
            Auth:
              Authorizer: EchelonCognitoAuthorizer
  LoggingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: GameLift/logging/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
      Events:
        LogEvent:
          Type: SNS
          Properties:
            Topic: !Ref MatchmakingTopic
  MatchmakingTopic:
    Type: AWS::SNS::Topic
  MatchmakingTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !Ref MatchmakingTopic
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        -
          Sid: OwnerPolicy
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: !Ref MatchmakingTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref "AWS::AccountId"
        -
          Sid: MatchmakingGameLiftPolicy
          Effect: Allow
          Principal:
            Service: gamelift.amazonaws.com
          Action: SNS:Publish
          Resource: !Ref MatchmakingTopic
